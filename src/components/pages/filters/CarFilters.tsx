/* eslint-disable @typescript-eslint/no-explicit-any */
import { CarSearchParams } from "@/@types/RequestHelpers/CarSearchParams";
import { FC } from "react";
import { InputField } from "../inputField/InputField";
import { SelectField } from "../selectField/SelectField";
import {
  CarType,
  EngineType,
  GearType,
  sortOptions,
  Status,
} from "@/@types/Enum";
import SearchInput from "../searchInput/SearchInput";
import { enumToOptionsWithLabels } from "@/utility/enumHelpers";

interface CarFiltersProps {
  filters: CarSearchParams;
  setFilters: React.Dispatch<React.SetStateAction<CarSearchParams>>;
  search: string;
  setSearch: (value: string) => void;
}

  export const engineTypeLabels = {
    Gasoline: "‡∏ô‡πâ‡∏≥‡∏°‡∏±‡∏ô‡πÄ‡∏ö‡∏ô‡∏ã‡∏¥‡∏ô",
    Diesel: "‡∏î‡∏µ‡πÄ‡∏ã‡∏•",
    Electric: "‡πÑ‡∏ü‡∏ü‡πâ‡∏≤",
    Hybrid: "‡∏•‡∏π‡∏Å‡∏ú‡∏™‡∏°",
  };
  export const GearTypeLabels = {
    Manual: "‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠",
    Automatic: "‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
  };
  export const carTypeLabels = {
    FourDoorSedan: "‡∏£‡∏ñ‡πÄ‡∏Å‡πã‡∏á‡∏™‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏ï‡∏π",
    PickUpTruck: "‡∏£‡∏ñ‡∏õ‡∏¥‡∏Å‡∏≠‡∏±‡∏û",
    CarSUV: "‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå SUV",
    CarVan: "‡∏£‡∏ñ‡∏ï‡∏π‡πâ",
  };
  export const statusLabels = {
    Available: "‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà",
    Sold: "‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
    Reserved: "‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß",
  };

const CarFilters: FC<CarFiltersProps> = ({
  filters,
  setFilters,
  search,
  setSearch,
}) => {
  const handleChange = (field: keyof CarSearchParams, value: any) => {
    setFilters({ ...filters, [field]: value, pageNumber: 1 });
  };

  const handleReset = () => {
    setFilters({
      pageNumber: 1,
      pageSize: 3,
    });
    setSearch("");
  };

  return (
    <div className="bg-white shadow-md rounded-lg p-6 w-full">
      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-4 gap-4">
        <h2 className="text-lg font-semibold text-gray-700">üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå</h2>

        {/* ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ã‡∏ï */}
        <div className="flex flex-col sm:flex-row justify-end gap-3">
          <button
            onClick={handleReset}
            className="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-lg shadow-sm"
          >
            ‚ôªÔ∏è ‡∏£‡∏µ‡πÄ‡∏ã‡∏ï
          </button>
          <button
            onClick={() => setFilters({ ...filters, pageNumber: 1 })}
            className="px-4 py-2 bg-primary hover:bg-blue-700 text-white font-medium rounded-lg shadow-sm"
          >
            üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
          </button>
        </div>
      </div>

      <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        <SearchInput value={search} onChange={setSearch} />

        <InputField
          label="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
          value={filters.minPrice}
          onChange={(v: any) => handleChange("minPrice", v)}
        />
        <InputField
          label="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
          value={filters.maxPrice}
          onChange={(v: any) => handleChange("maxPrice", v)}
        />

        <InputField
          label="‡∏õ‡∏µ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"
          value={filters.minYear}
          onChange={(v: any) => handleChange("minYear", v)}
        />
        <InputField
          label="‡∏õ‡∏µ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
          value={filters.maxYear}
          onChange={(v: any) => handleChange("maxYear", v)}
        />

        <InputField
          label="‡πÑ‡∏°‡∏•‡πå‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î"
          value={filters.minMileage}
          onChange={(v: any) => handleChange("minMileage", v)}
        />
        <InputField
          label="‡πÑ‡∏°‡∏•‡πå‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"
          value={filters.maxMileage}
          onChange={(v: any) => handleChange("maxMileage", v)}
        />

        <SelectField
          label="‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏£‡∏ñ"
          value={filters.carType?.toString()}
          onChange={(v) =>
            handleChange("carType", v === "" ? undefined : Number(v))
          }
          options={enumToOptionsWithLabels(CarType, carTypeLabels)}
        />

        <SelectField
          label="‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏¢‡∏ô‡∏ï‡πå"
          value={filters.engineType?.toString()}
          onChange={(v) =>
            handleChange("engineType", v === "" ? undefined : Number(v))
          }
          options={enumToOptionsWithLabels(EngineType, engineTypeLabels)}
        />

        <SelectField
          label="‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡πå"
          value={filters.gearType?.toString()}
          onChange={(v) =>
            handleChange("gearType", v === "" ? undefined : Number(v))
          }
          options={enumToOptionsWithLabels(GearType, GearTypeLabels)}
        />

        <SelectField
          label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"
          value={filters.status?.toString()}
          onChange={(v) =>
            handleChange("status", v === "" ? undefined : Number(v))
          }
          options={enumToOptionsWithLabels(Status, statusLabels)}
          placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ñ"
        />

        <SelectField
          label="‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°"
          value={filters.sortBy}
          onChange={(v: any) => handleChange("sortBy", v)}
          options={sortOptions.map((opt) => ({
            label: opt.label,
            value: opt.value,
          }))}
        />
      </div>
    </div>
  );
};

export default CarFilters;
